@Enable*注解说明

@EnableAspectJAutoProxy 开启对AspectJ自动代理的支持。
@EnableAsync 开启异步方法的支持。
@EnableScheduling 开启计划任务的支持。
@EnableWebMvc 开启Web MVC的配置支持。
@EnableConfigurationProperties开启对@ConfigurationProperties注解配置Bean的支持。
@EnableJpaRepositories开启对Spring Data JPA Repository的支持。
@EnableTransactionManagement开启注解式事务的支持。
@EnableCaching开启注解式的缓存支持。
通过简单的@Enable*来开启一项功能的支持，从而避免自己配置大量的代码。

一、Spring MVC基础

1、Spring MVC 概述
MVC： Model + View + Controller （数据模型 + 视图 + 控制器）
三层架构：Presentation tier + Application tier + Data tier （展现层+应用层+数据访问层）
实际上MVC只存在三层架构的展现层：
M 实际上是数据模型，是包含数据的对象。在Spring MVC里，有一个专门的类叫Model，用来和 V 之间的数据交互、传值；
V 指的是视图页面，包含JSP、FreeMarker、Velocity、Thymeleaf、 Title等；
C 当然是控制器（SpringMVC的注解@Controller的类）

二、Spring MVC项目快速搭建
①、构建Maven项目
在pom.xml文件中引入相关的jar包
②、日志配置
在src/main/resources目录下，新建logback.xml用来配置日志。
③、演示页面
在src/main/resources下建立view目录，并在此目录下新建index.jsp
为什么页面不放在Maven标准的src/main/webapp/WEB-INF下？此处这样建的主要目的是让大家熟悉Spring Boot的页面习惯的放置方式，
Spring Boot的页面就放置在src/main/resources下。
④、Spring MVC配置
⑤、Web 配置
⑥、简单控制器
⑦、运行
安装一个Tomcat，解压后在系统环境中进行设置


三、Spring MVC的常用注解
(1)@Controller
    @Controller注解在类上，表名这个类是SpringMVC里的Controller，将其声明为Spring的一个Bean，
Dispatcher Servlet会自动扫描注解了此注解的类，并将Web请求映射到注解了@RequestMapping的方法上。
这里特别指出，在声明普通Bean的时候，使用@Component、@Service、@Repository和@Controller是等同的，
因为@Service、@Repository、@Controller都组合了@Component元注解；但在Spring MVC声明控制器Bean的
时候，只能使用@Controller

(2) @RequestMapping
    @RequestMapping注解是用来映射Web请求(访问路径和参数)、处理类和方法的。@RequestMapping可注解
在类或方法上。注解在方法上的@RequestMapping路径会继承注解在类上的路径，@RequestMapping支持Servlet
的request和response作为参数，也支持对request和response的媒体类型进行配置。

(3) @ResponseBody
    @ResponseBody支持将返回值放在response体内，而不是返回一个页面。我们在很多地方基于Ajax的程序
的时候，可以以此注解返回数据而不是返回页面；此注解可放置在返回值前或者方法上。

(4) @RequestBody
    @RequestBody允许request的参数在request体中，而不是在直接链接在地址后面。此注解放置在参数前。

(5) @PathVariable
    @pathVariable用来接收路径参数，如/news/001，可接收001作为参数，此注解放置在参数前。

(6) @RestController
    @RestController是一个组合注解，组合了@Controller和@ResponseBody，这就意味着当你只开发一个和页面
交互数据控制的时候，需要使用此注解。若没有此注解，想要实现上述功能，则需自己在代码中加@Controller和
@ResponseBody两个注解。

四、SpringMVC基本配置
1、静态资源映射
    程序的静态文件(js、css、图片)需要直接访问，这时我们可以在配置重写addResourceHandlers方法来实现。
    配置类要继承WebMvcConfigurerAdapter类，重写其方法可对Spring MVC进行配置。
    @EnableWebMvc 开启SpringMVC支持，若无此句，重写WebMvcConfigurerAdapter方法无效。

2、拦截器配置
    拦截器实现对每一个请求处理前后进行相关的业务处理，类似于Servlet的Filter
    可以让普通的Bean实现HandlerInterceptor接口或继承HandlerInterceptorAdapter类来实现自定义拦截器。
    通过重写WebMvcConfigurerAdapter的addInterceptors方法来注册自定义的拦截器。

3、@ControllerAdvice
    通过@ControllerAdvice，我们可以将对于控制器的全局配置放置在同一个位置，注解了@Controller的类的方
法可使用@ExceptionHandler、@InitBinder、@ModelAttribute注解到方法上，这对所有注解了@RequestMapping的
控制器内的方法都有效。
    @ExceptionHandler：用于全局处理控制器里的异常。
    @InitBinder：用来设置WebDataBinder，WebDataBinder用来自动绑定前台请求参数到Model中
    @ModelAttribute：本来的作用是绑定键值对到Model里，此处是让全局的@RequestMapping都能获得在此处设置
的键值对。

4、其他配置
    1）、快捷的ViewController
    在HelloController里，我们写了三行有效代码，只是简单的页面跳转。在实际开发中会涉及大量这样的页面
转向，若都这样写会很麻烦，我们可以通过在配置中重写addViewControllers来简化配置。

    2）、路径匹配参数配置
    在Spring MVC中，路径参数如果带"."的话"."后面的值将被忽略
例如，访问http://localhost:8081/anno/pathvar/xx.yy 此时"."后面的yy被忽略
页面显示：url: http://localhost:8081/anno/pathvar/xx.yy can access,str: xx
    通过重写configurePathMatch方法可不忽略"."后面的参数

5、更多配置
    查看WebMvcConfigurerAdapter类的API。

五、Spring MVC的高级配置
1、文件上传配置
    文件是一个项目里经常要用的功能，Spring MVC通过配置一个MultipartResolver来上传文件。
    在Spring的控制器中，通过MultipartFile file来接收文件，通过MultipartFile[] files接收多个文件上传。

2、自定义HttpMessageConverter
    HttpMessageConverter是用来处理request和response里的数据的。Spring为我们内置了大量的HttpMessageConverter，
例如，MappingJackson2HttpMessageConverter、StringHttpMessageConverter等。
    配置自定义的HttpMessageConverter的Bean，在SpringMVC里注册HttpMessageConverter有两个方法：
    ·configureMessageConverters:重载会覆盖掉SpringMVC默认注册的多个HttpMessageConverter。
    ·extendMessageConverters:仅添加一个自定义HttpMessageConverter,不覆盖默认注册的HttpMessageConverter。



















